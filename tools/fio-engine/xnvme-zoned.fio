; Running xNVMe/fio on a Zoned Device
;
; README
;
; Make sure you provide the correct path to 'libxnvme-fio-engine.so' in the
; sections below
;
; Job-file is intended to be used as:
;
; fio xnvme-compare.fio \
;		--section=qd1 \
;		--filename=/dev/nvme0n1 \
;		--ioengine=external:/usr/lib/libxnvme-fio-engine.so \
;		--async=iou \
;		--sqthread_poll=1
;
; or
;
; fio xnvme-compare.fio \
;		--section=qd1 \
;		--filename=/dev/nvme0n1 \
;		--ioengine=io_uring \
;		--sqthread_poll=1
;
; That is, varying the ioengine, and its options, on the command-line,
; fixing the workload, with the exception of changing io-depth using the
; --section
;
; Take note of the "special" use of 'filename' in the sections below, for
; direct access via the user-space NVMe driver provided by SPDK, then the ":" in
; the --filename argument must be escaped. Notice that it needs a different
; escape sequence in the .fio file and when provided and command-line-argument.
;
; On the command-line, it needs "\\" to escape ":", eg.
; --filename=pci\\:0000\\:01\\:00.0?nsid=1
;
; Whereas, when given as 'filename' in the fio-script, only a single "\" is
; needed, like so:
; filename=pci\:0000\:01\:00.0?nsid=1
;
;
; I/O errors have been observed with fio 3.20, however, not with 3.22, in any
; case, if you encounter them, then you can clean up the drive by first
; invoking:
;
;   zoned mgmt-reset /dev/nvme0n2 --slba 0x0 --all
;
; Which will prepare the drive
;
[global]
;ioengine=external:/usr/lib/libxnvme-fio-engine.so
zonemode=zbd
size=1G
iodepth=1
bs=4K
direct=1
thread=1
;time_based=1
;runtime=10
ramp_time=1
norandommap=1
; If fio complains about zone-size, then run:
; zoned info /dev/nvme0n1 it will provide the values you need, then define it:
; zonesize=nsect * nbytes
;
;zonesize=

; Avoid accidentally creating device files; e.g. "/dev/nvme0n1", "/dev/nullb0"
allow_file_create=0

[default]

[write]
rw=write

[read]
rw=read

[verify]
rw=write
verify=crc32c
